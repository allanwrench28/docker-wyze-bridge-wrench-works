name: Check Upstream Updates

on:
  schedule:
    # Run every Monday at 9:00 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch: # Allow manual trigger

jobs:
  check-upstream:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Add upstream remote
        run: |
          git remote add upstream https://github.com/mrlt8/docker-wyze-bridge.git || true
          git fetch upstream

      - name: Check for updates
        id: check
        run: |
          # Get current version from .env
          CURRENT_VERSION=$(grep "^VERSION=" app/.env | cut -d'=' -f2)
          echo "Current version: $CURRENT_VERSION"
          
          # Get latest upstream tag
          LATEST_TAG=$(git ls-remote --tags upstream | grep -v '\^{}' | grep 'v[0-9]' | awk '{print $2}' | sed 's/refs\/tags\///' | sort -V | tail -1)
          echo "Latest upstream tag: $LATEST_TAG"
          
          # Get commits ahead/behind
          BEHIND=$(git rev-list --count HEAD..upstream/main)
          echo "Commits behind upstream: $BEHIND"
          
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "behind=$BEHIND" >> $GITHUB_OUTPUT
          
          if [ "$BEHIND" -gt 0 ]; then
            echo "needs_update=true" >> $GITHUB_OUTPUT
          else
            echo "needs_update=false" >> $GITHUB_OUTPUT
          fi

      - name: Create issue if updates available
        if: steps.check.outputs.needs_update == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const currentVersion = '${{ steps.check.outputs.current_version }}';
            const latestTag = '${{ steps.check.outputs.latest_tag }}';
            const behind = '${{ steps.check.outputs.behind }}';
            
            const title = `ðŸ”„ Upstream updates available: ${latestTag}`;
            const body = `## Upstream Updates Available
            
            This fork is ${behind} commit(s) behind [mrlt8/docker-wyze-bridge](https://github.com/mrlt8/docker-wyze-bridge).
            
            **Current fork version**: ${currentVersion}
            **Latest upstream tag**: ${latestTag}
            
            ### Action Required
            
            1. Review upstream changes: https://github.com/mrlt8/docker-wyze-bridge/compare/v${currentVersion}...${latestTag}
            2. Test changes in a local environment
            3. Follow the sync procedure in [MAINTENANCE.md](MAINTENANCE.md#syncing-with-upstream)
            4. Update documentation if needed
            5. Create release after merging
            
            ### Sync Commands
            
            \`\`\`bash
            git fetch upstream
            git checkout main
            git merge upstream/main
            # Resolve any conflicts
            # Test thoroughly
            git push origin main
            \`\`\`
            
            ---
            
            *This issue was automatically created by the upstream check workflow.*
            *Please close this issue after syncing with upstream.*`;
            
            // Check if issue already exists
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'upstream-update'
            });
            
            const existingIssue = issues.data.find(issue => 
              issue.title.includes(latestTag)
            );
            
            if (!existingIssue) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['upstream-update', 'maintenance']
              });
              console.log('Created new issue for upstream update');
            } else {
              console.log('Issue already exists for this version');
            }

      - name: Summary
        run: |
          echo "## Upstream Check Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Current Version**: ${{ steps.check.outputs.current_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Latest Upstream**: ${{ steps.check.outputs.latest_tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commits Behind**: ${{ steps.check.outputs.behind }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Update Needed**: ${{ steps.check.outputs.needs_update }}" >> $GITHUB_STEP_SUMMARY
